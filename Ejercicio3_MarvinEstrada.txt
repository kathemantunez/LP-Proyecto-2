;Ejercicio #3
(define concatenar_ambas_listas (lambda (lis1 lis2)
                        (if (and (null? lis1) (null? lis2))
                          '()
                          (if (not (null? lis1))
                            (cons (car lis1) (concatenar_ambas_listas (cdr lis1) lis2))
                          (if (not (null? lis2))
                            (cons (car lis2) (concatenar_ambas_listas lis1 (cdr lis2)))
                            '()
                          )
                          )
                        )
                      )
)

(define aplanar (lambda (lista)
            (if (null? lista)
              '()
              (if (list? (car lista))
                (concatenar_ambas_listas (aplanar (car lista)) (aplanar (cdr lista)))
                (concatenar_ambas_listas (list (car lista)) (aplanar (cdr lista)))
              )
            )
          )
)
;Prueba Ejercicio 3
(define l4 '(6 (2 (1 () ()) (4 (3 () ()) (5 () ()))) (7 () (9 (8 () ()) ()))))
(aplanar l4)
;Fin Prueba Ejercicio 3